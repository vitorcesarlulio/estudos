ALGORITMOS
	O QUE É?
		Sequencia de passos, uma sequencia de passos, uma ordem, uma organização visando concluir determinado objetivo, um problema por exemplo.
		Durante essa sequencia de passos são tomadas decisões
		Diversos caminhos para chegar ao objetivo (levando em consideração produtividade, viabilidade etc)
		Condições, organização das sequencias, o que mantem a ordem
		Consequência, é o que vem após a tomada de decisões. COm uma boa organização você consegue prever a consequência de uma decisão
		PROBLEMAS NO GERAL

	PSEUDOCÓDIGO
		REAIS: tanto números inteiros, quanto com virgula, negativos também
		CARACTERES: somente letras
		Inteiros: sem virgula porem pode negativos
		COnstantes logicas: true ou false 
		Exemplo:
		var 
			a: real;
			nome: Caractere;
			idade: inteiro;
		OU
		var	a: real;
		var	nome: Caractere;
		var	idade: inteiro;
		const numero: Inteiro:
		
		Atribuição HIGHTCODE
		nos mesmos definimos, usuário não vê isso
		a <- 1*1
		
		ESCREVA ("Delta = ", delta:6:2); //6:2 quer dizer que são 6 dígitos e dos seis, 2 são casas decimais
		
		Comparação
		SE (delta == 0 )
		
		Entrada, processamento e saída
		
		CONDIÇÕES e OPERANDOS
			Se (num == 10)
				entao escreva("Teste");
			Senao Se (num == 2)
				entao escreva("Teste1"); 
			Senão
				escreva("Teste2");
			Fimse
			
			&& - "E"
				Se (num1 == 10 && num2 == 2) //as duas tem que ser verdadeiras
					faça tal coisa
				Senão //se o num2 for diferente de 2, já cai aqui no senão
					faça outra coisa
			|| - "OU"
				Se (num1 || 10 && num2 || 2) //pelo menos 1 tem que ser verdadeira
					faça tal coisa
				Senão 
					faça outra coisa
			
		LOOPS
			For - "Para" 
				Você tem definido a quantidade de vezes que vai repetir
				
				var i : inteiro;
				
				//Atrubuo i = 1
				//de 1 até 10 vai fazer tal coisa
				para i = 1 até 10 faça {
					escreva("i", i);
				}fimpara
				
			While - "Enquanto"
				Diferente do for, não sabemos quantas vezes será repetido uma tarefa
				Impor uma condição de saída, mas não sabemos a quantidade de vezes que vai ter que fazer
				Geralmente utilizado para coisas não contáveis
				
				enquanto idade != "Zoraia" faça
					escreva ("Digita uma idade");
					leia(idade);
				fim-enquanto;
				
				enquanto idade != 19 faça
					escreva ("Digita um nome");
					leia(nome);
				fim-enquanto;
				
				i=0;
				Enquanto(i != 10){
					i++;
					Escreva("i",i);
				}
				
			Do While
				executa primeiro o processo e depois valida a condição (while valida antes de executar)
				
				faça {
					escreva ("digite seu nome");
					leia(nome);
				} enquanto nome != "Vitor"
				fim-enquanto
				
				
				
			Switch Case
				var opcao : inteiro;
				
				caso opcao
					seja 1 faca: escreva("Opção 1");
					seja 2 faca: escreva("Opção 2");
					seja 3 faca: escreva("Opção 3");
					senao faca: escreva("Nenhuma das opções");
				fimcaso
				
		PROCEDIMENTOS
			Código com proposito separado, que ao ser invocado e ter os parâmetros necessários passados executa uma sequencia de passos definidos para concluir o proposito designado
			
			var, num1, num2, total: inteiro;
			
			entrada(num1, num2);
			soma(num1, num2, total);
			escreva("?", total);
			
			
			procedimento entrada (num1, num2: inteiro)
				escreva("Digite o n1");
				leia(num1);
				
				escreva("Digite o n2");
				leia(num2);
			fim-procedimento
			
			procedimento soma (num1, num2, total: inteiro)
				total <- num1 + num2;	
			fim-procedimento
			
		FUNÇÕES
			semelhante aos procedimentos, também recebem parâmetros só que ao invés de não devolver nada (os procedimentos não retornam nenhum valor) a função retorna um valor.
			
			entrada(num1, num2);
			total = soma(num1, num2);
			escreva("?", total);
			
			Função soma (num1, num2 : inteiro) :inteiro //esse inteiro fora é para função saber o que ela vai retornar
				return num1 + num2;
			fim-função
			
		VARIÁVEIS GLOBAIS
			todo o código vai enxergar ela, quando a variável acaba sendo meia que fixa eu muitas partes do código utilizam ela
			em procedimentos e funções você não precisa passar nos parâmetros, como elas são globais você usa onde quiser
			
			Procedimento soma ()
				total = num1 + num2
			fim-procedimento
			
		VARIÁVEIS LOCAIS
			somente quem esta dentro do proc. função vai enxerga-lá
			
			inicio
				soma();
			fim
			
			procedimento soma()
				var num1, num2, soma;
				
				total = num1 + num2
				
				escreva("?", total);
			fim-procedimento
			
	FLUXOGRAMA
		Utilizar símbolos para exemplificar um algoritmo
		Vantagens: simples, utiliza de gráficos e pouca escrita
		Desvantagens: conhecer o significado de cada símbolo. Se for muito grande o fluxograma fica difícil de entender.
		
		Norma internacional: IEC 5807:1985 Normatização dos símbolos