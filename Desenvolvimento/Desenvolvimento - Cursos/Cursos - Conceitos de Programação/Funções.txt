FUNÇÕES
	- Funções são blocos de comandos nomeados, que quando são invocados
		executam o conteúdo declaração em seu corpo ({ ..... })
	
		//Declarando uma variavel
			int x = 0; 
			é possível distinguir devido o tipo, alias (nome da variável), operador de atribuição
		
		//Acessando o conteúdo da variável
			x 
			 possível distinguir devido não haver a tipagem 
		
		//Informando o endereço de memória na qual a variável está
			&x
			
		
		//Declaração de uma função
			void somar(int valorA, int valorB){ ... }
			precedencia de tipo, alias, entre parentes a declaração de variaveis

		//Invocação de execução de uma função
			somar(10, 20);
			quando invocada você não declara, você passa o valor ou a referencia, ;

	- No que tange a forma de invocar a função:
		Chamada por valor
			situação na qual eu fixo o argumento passando os valores para a função. 
				Ex: somar(10, 15);
	
		Chamada por referência
			informo a referência de uma variável.
			evito repetição
				Ex: somar(valorA, valorB);
				Ex: somar(10, valorB); //forma mista, pré-fixou e passou também uma referência.
				
	- Sobrecarga de Funções	- Implementação do Conceito de Polimorfismo
		Funções cujo e o retorno são os mesmos porém há uma variação em sua 'assinatura'. A assinatura de uma função consiste em três características:
			* o número de argumentos (int) vs (int, int)
			* o tipo dos argumentos (int, int) vs (float, int)
			* a ordem dos argumentos (int, float) vs (float, int)
			
		Posso ter funcções com mesmo nome, porem com argumentos diferentes 
	
		int valorTotal(int valor, int quantidade){
			return valor * quantidade;
		}
		int valorTotal(int quantidade){
			return valor * quantidade;
		}