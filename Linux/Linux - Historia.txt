Como você já deve estar ciente, o kernel Linux encontrou seu caminho em um número incrível de sistemas diversos. Agora, este sistema pode ser encontrado em tudo, desde automóveis a foguetes, relógios a televisores e netbooks aos supercomputadores mais rápidos. O Linux representa apenas uma porcentagem relativamente pequena dos sistemas operacionais encontrados em computadores desktop, mas ganhou uso generalizado em servidores, dispositivos de Internet das Coisas (IoT), equipamentos de rede, smartphones e muitos outros dispositivos que você pode não pensar como sendo mesmo computadores. A partir do roteador doméstico que fornece sua conexão com a Internet ao servidor em que este curso está hospedado, é provável que vários dispositivos com Linux estejam permitindo que você leia esta página.

Por que aprender Linux?
	O campo da Tecnologia da Informação (TI) está cheio de oportunidades. Para indivíduos que desejam seguir uma carreira em TI, um dos maiores desafios pode ser decidir como começar. Muitas vezes, as pessoas estão motivadas a aprender novas habilidades que lhes permitirão buscar oportunidades maiores e melhores tanto na sua vida pessoal como profissional. Aprender uma nova habilidade requer tempo e disciplina, mas com a motivação certa, não precisa ser doloroso. Nesta seção, discutiremos por que o tempo e o esforço que você investir no aprendizado do Linux serão benéficos para você; e lembre-se, todos que trabalham em TI tiveram que começar em algum lugar.
	
	Aprender Linux é uma ótima maneira de começar! Por que o Linux é uma habilidade importante para aprender no mundo orientado pela tecnologia de hoje?
	
O que é Linux?
	Antes de determinarmos o que torna o Linux um recurso tão grande para o seu conjunto de habilidades, vamos defini-lo primeiro. Linux é um software de sistema operacional que é executado em um sistema de computador de hardware. Um sistema operacional é um software que permite que outros programas, como processadores de texto e navegadores web, sejam instalados e executados em um computador.
	
	Seu celular, tablet, laptop e desktop precisam de um sistema operacional para executar o software (geralmente chamado de aplicativos) que você deseja usar. Isso significa que o Linux não se limita a apenas desktops e laptops, e vamos expandir isso à medida que continuamos nossa discussão.
	
	A principal razão pela qual aprender Linux é útil, é que Linux é usado em quase todos os lugares! O Linux é usado em computadores desktop e laptop, servidores web, dispositivos móveis (Android), tecnologia de nuvem pública (ou seja, Google, Amazon, etc), Chromebooks e redes (ou seja, Cisco Networks). Embora você nunca tenha usado o Linux em um desktop ou laptop, é provável que você esteja usando outra tecnologia que seja executada no Linux, como um celular rodando o Android, um tablet ou sites populares como Facebook, Twitter e Amazon. Na verdade, estima-se que os servidores que executam Linux geram mais da metade das páginas web na internet.
	
Quem pode usar o Linux?
	Você pode ter ouvido falar do Linux e pensou que apenas indivíduos tecnologicamente avançados estão usando-o para programar, desenvolver ou até mesmo hacking! Embora seja verdade que muitos técnicos usam Linux, isso não significa que o Linux seja muito difícil de aprender ou não seja útil para iniciantes.
	
	Na verdade, entender o Linux, especialmente a interface de linha de comando do Linux, ajudará você a entender melhor a computação enquanto lhe dá habilidades básicas de computação que você pode usar em uma carreira futura.
	
	Para entender por que as habilidades do Linux são únicas, vamos examinar a interface gráfica do usuário (GUI). Esta é a interface que você provavelmente está usando em seu smartphone, tablet ou computador hoje. Uma GUI exibe ícones e imagens que você pode selecionar para dizer ao dispositivo o que deseja fazer ou usar. Atrás da GUI, está um código que um programador desenvolveu. Quando você clica em um ícone ou pasta em uma GUI, ele envia um comando para o código dizendo ao sistema o que fazer.
	
	Os desktops Linux usam uma GUI, mas também tem uma ferramenta mais eficiente para realizar as mesmas ações que uma GUI, a interface de linha de comando (CLI).
	
	A linha de comando do Linux é uma interface baseada em texto que aceita comandos digitados nela. Esses comandos fazem com que uma ação seja executada no sistema operacional do computador. Claro, janelas e ícones são fáceis de usar, no entanto, a linha de comando é muitas vezes o herói quando se trata de administração do sistema e solução de problemas, uma vez que dá uma imagem clara do que o sistema está fazendo em qualquer momento.
	
	Tudo isso considerado, por que aprender Linux é um bom começo para alguém que considera uma carreira em TI? Como dito anteriormente, o uso do Linux é generalizado e continua a crescer em todas as áreas da tecnologia. O que empresas e organizações como NASA, McDonald's, New York Stock Exchange (NYSE), DreamWorks Animation e o Departamento de Defesa dos EUA têm em comum? Sim, você adivinhou corretamente, todos eles usam Linux.
	
	Essas empresas têm algo mais em comum, pois reconhecem que investir em tecnologia é importante em um mundo que está ansioso por adotar novas tecnologias para inovar e resolver problemas. A proliferação da tecnologia em quase todos os aspectos da vida resolveu muitos problemas, mas também criou novos desafios. Por exemplo, agora que quase tudo pode ser feito on-line, estamos criando dados digitais a uma taxa rápida, o que está criando uma demanda por esses dados. As habilidades técnicas para analisar, processar, proteger e transmitir dados também estão em alta demanda. O aprendizado do Linux pode ajudá-lo na jornada para adquirir essas habilidades. Veja a seguir alguns exemplos de algumas profissões de TI que exigem conhecimento de habilidades em Linux:

		Engenharia de rede - Os engenheiros de rede são responsáveis pelo gerenciamento dos computadores da rede usados para transmitir dadosO conhecimento do Linux é fundamental para os engenheiros de rede, já que mais da metade dos servidores do mundo são baseados em Linux. A maioria dos sistemas operacionais de rede são baseados em uma variação do Linux.
	
		cibersegurança - Profissionais de cibersegurança monitoram e investigam ameaças de segurança aos dados em sistemas. Linux é usado em cibersegurança para realizar testes de penetração do sistema e avaliar a vulnerabilidade de um sistema.
	
		Desenvolvimento/Programação - Desenvolvedores e programadores projetam aplicativos de computador. A linha de comando do Linux permite que desenvolvedores e programadores criem scripts; uma função que permite que um usuário coloque comandos juntos para executar ações complexas em um computador. Linux também é usado neste campo porque somente Linux permite que os usuários acessem seu código-fonte, dando aos usuários a capacidade de experimentar o código e aprender fazendo.
	
		Análise de Dados - Analistas de dados e cientistas classificam e analisam conjuntos de dados para encontrar padrões para relatar e prever tendências e comportamentos. Os analistas de dados usam o Linux devido à grande variedade de ferramentas e comandos disponíveis para análise de dados, como MySQL e muito mais.
	
	Os sistemas operacionais Linux vêm em muitas formas. Há uma variedade de distribuições disponíveis para atender às necessidades e demandas de muitos setores de TI. Por exemplo, os profissionais de cibersegurança podem usar o Linux Kali, os desenvolvedores podem usar o Linux Ubuntu, os usuários regulares podem usar o Linux Mint e os servidores corporativos podem ser executados no Red Hat Enterprise Linux.
	
	Considere isto
		As habilidades do Linux são necessárias para muitas faixas profissionais de TI. Por exemplo, o conhecimento de comandos básicos do Linux é um pré-requisito para programas de certificação de TI, como a popular certificação Cisco Certified CyberOps Associate. Para saber mais sobre como o Linux se aplica ao Cisco Certified CyberOps Associate, visite a seção no final deste curso chamada Linux for Cisco Certified CyberOps Associate.
		
	Algumas outras grandes razões para usar e aprender Linux são que, em muitos casos, é gratuito, fácil de instalar, open source, e há uma comunidade Linux ativa disponível para suporte. Isso permite que os iniciantes que querem começar a aumentar suas habilidades de TI comecem a usar o Linux facilmente.
	
	Como você pode ver, há muitas razões para aprender e explorar o Linux!
	

Sintaxe de Comando Básico
	Este módulo trata exclusivamente da CLI ou da interface de linha de comando, em vez de uma GUI ou interface gráfica do usuário que você possa estar familiarizado. O terminal CLI é uma ferramenta poderosa que frequentemente é o principal método usado para administrar pequenos dispositivos de baixo consumo de energia, servidores de computação em nuvem extremamente capazes e tudo o que há entre eles. Uma compreensão básica do terminal é essencial para diagnosticar e corrigir a maioria dos sistemas baseados em Linux. Como o Linux agora se tornou tão onipresente, mesmo aqueles que planejam trabalhar principalmente com sistemas que não utilizam o kernel Linux podem se beneficiar de ter uma compreensão básica do terminal.
	
	O que é um comando? Um comando é um programa de software que, quando executado na CLI (interface de linha de comando), executa uma ação no computador. Quando você digita um comando, um processo é executado pelo sistema operacional que pode ler o input, manipular dados e produzir output. Um comando executa um processo no sistema operacional, que faz com que o computador execute um trabalho.
	
	Para executar um comando, o primeiro passo é digitar o nome do comando. Clique no terminal à direita. Digite ls (letras minúsculas L e S) e pressione Enter. O resultado deve ser semelhante ao exemplo abaixo:
	
	O nome do comando geralmente é baseado no que ele faz ou no que o desenvolvedor que criou o comando acha que descreve melhor a função do comando. Por exemplo, o comando ls exibe uma lista de informações sobre arquivos. Associar o nome do comando com algo mnemônico para o que ele faz pode ajudá-lo a lembrar os comandos mais facilmente.
	
	Considere isto
		Cada parte do comando é normalmente sensível a maiúsculas e minúsculas, então LS está incorreto e falhará, mas ls está correto e será executado.
		
	A maioria dos comandos segue um padrão simples de sintaxe:
	comando [opcoes…] [argumentos…]
	Em outras palavras, você digita um comando, seguido de quaisquer opções e/ou argumentos antes de pressionar a tecla Enter. Normalmente, as opções alteram o comportamento do comando e os argumentos são itens ou valores para o comando agir. Embora existam alguns comandos no Linux que não são inteiramente consistentes com essa sintaxe, a maioria dos comandos usam essa sintaxe ou algo semelhante.
	No exemplo acima, o comando ls foi executado sem opções ou argumentos. Quando este for o caso, seu comportamento padrão é retornar uma lista de arquivos contidos no diretório atual.

Argumentos
	comando [opcoes…] [argumentos…]
	Um argumento pode ser usado para especificar algo para o comando agir. O comando ls pode ser dado o nome de um diretório como um argumento, e ele irá listar o conteúdo desse diretório. No próximo exemplo, o diretório Documents será usado como um argumento:
	
	A saída resultante é uma lista de arquivos contidos no diretório Documents.

	Como o Linux é de código aberto, existem alguns segredos interessantes que foram adicionados pelos desenvolvedores. Por exemplo, o comando aptitude é uma ferramenta de gerenciamento de pacotes disponível em algumas distribuições Linux. Este comando aceitará moo como argumento:
	
Opções
	comando [opcoes…] [argumentos…]
	As opções podem ser usadas para alterar o comportamento de um comando. Na página anterior, o comando ls foi usado para listar o conteúdo de um diretório. No exemplo a seguir, a opção -l é fornecida ao comando ls, o que resulta em uma saída de “exibição longa”, o que significa que a saída fornece mais informações sobre cada um dos arquivos listados:
	
	Muitas vezes, o caractere é escolhido para ser mnemônico para o seu propósito, como escolher a letra l para longo ou r para reverso. Por padrão, o comando ls imprime os resultados em ordem alfabética, portanto, adicionar a opção -r irá imprimir os resultados em ordem alfabética inversa.
	
	Várias opções podem ser usadas de uma só vez, quer dadas como opções separadas como em -l -r ou combinadas como -lr. O resultado de todos esses exemplos seria o mesmo:
	
	Como explicado acima, -l fornece um formato de listagem longa enquanto -r reverte a listagem. O resultado do uso de ambas as opções é uma listagem longa dada em ordem inversa:
	
	Em última análise, os comandos podem usar muitas combinações de opções e argumentos. As possibilidades para cada comando serão únicas. Lembra-se da dica da aptitude?
	
	É possível alterar o comportamento deste comando usando opções. Veja o que acontece quando a opção -v (verbosa) é adicionada:
	Ao combinar várias opções -v, podemos obter uma variedade de respostas:
	
Impressão do Diretório de Trabalho
	Para descobrir onde você está atualmente localizado dentro do sistema de arquivos, o comando pwd pode ser usado. O comando pwd imprime o diretório de trabalho, sua localização atual dentro do sistema de arquivos:
	
	pwd [OPÇÕES]
	
	Considere isto
		Não ligue a impressora ainda! Nos primeiros dias da computação, a saída da linha de comando seria enviada para impressoras físicas. Este método foi substituído por monitores de vídeo que poderiam exibir informações mais rapidamente. Nós ainda usamos a palavra print, mesmo que a saída esteja apenas sendo exibida em sua tela.
	
	A saída do comando acima indica que o usuário está atualmente em sua pasta pessoal, mostrada no sistema de arquivos abaixo.
	
	Considere isto
		Observe que nossas máquinas virtuais empregam um prompt que exibe o diretório de trabalho atual, enfatizado com a cor azul. No primeiro prompt acima, o azul ~ é equivalente a /home/sysadmin, representando o diretório home do usuário.
		
		Depois de alterar diretórios (aprenderemos como fazer isso na próxima seção), a nova localização também pode ser confirmada no novo prompt, novamente mostrado em azul.
		
Alterando Diretórios
	Os arquivos são usados para armazenar dados tais como texto, gráficos e programas. Os diretórios são um tipo de arquivo usado para armazenar outros arquivos- eles fornecem uma estrutura organizacional hierárquica. A imagem abaixo mostra uma versão abreviada da estrutura do sistema de arquivos nas máquinas virtuais.

	Para navegar pela estrutura do sistema de arquivos, use o comando cd (change directory) para alterar diretórios.

	cd [opções] [caminho]
	Se você olhar novamente para o gráfico acima, você verá que o diretório Documents está localizado dentro do diretório home, onde você se encontra atualmente. Para mover para o diretório Documents, use-o como argumento para o comando cd:
	
	Os diretórios são equivalentes a pastas no Windows e Mac OS. Assim como esses sistemas operacionais mais populares, uma estrutura de diretórios Linux tem um nível superior. Não é chamado de “Meu Computador”, mas sim o diretório root (raiz) e é representado pelo caractere /. Para mover para o diretório root, use o caractere / como argumento para o comando cd.
	
	O argumento para o comando cd é mais do que apenas o nome de um diretório, na verdade é um caminho. Um caminho é uma lista de diretórios separados pelo caractere /. Por exemplo, /home/sysadmin é o caminho para seu diretório home:

	Se você pensar no sistema de arquivos como um mapa, os caminhos são as direções passo a passo; eles podem ser usados para indicar a localização de qualquer arquivo dentro do sistema de arquivos. Existem dois tipos de caminhos: absoluto e relativo. Os caminhos 		absolutos começam na root do sistema de arquivos, os caminhos relativos começam a partir da sua localização atual.
	
	Caminhos Absolutos
		Um caminho absoluto permite que você especifique a localização exata de um diretório. Ele sempre começa no diretório root, portanto ele sempre começa com o caractere /. O caminho para o diretório home /home/sysadmin é um caminho absoluto. O caminho começa no diretório root /, se move para o diretório home e, em seguida, para o diretório sysadmin. Seguindo esse caminho em uma interface gráfica do usuário (GUI) como seu computador doméstico seria algo parecido com isso:
		
		Use este caminho como um argumento para o comando cd para voltar para o diretório home do usuário sysadmin.
		
	Caminhos Relativos
		Um caminho relativo fornece direções para um arquivo relativo à sua localização atual no sistema de arquivos. Os caminhos relativos não começam com o caractere /, eles começam com o nome de um diretório. Dê outra olhada no primeiro exemplo de comando cd. O argumento é um exemplo do caminho relativo mais simples: o nome de um diretório em sua localização atual.
		
		Um caminho relativo começa a partir do diretório atual, no entanto você não o inclui no caminho. O primeiro passo seria mover para o diretório School e, em seguida, mover para o diretório Art. Use o caractere / para separar os nomes dos diretórios e o resultado School/Art é um caminho relativo do diretório Documents para o diretório Art:
		
		Use o caminho relativo como um argumento para o comando cd para mover para o diretório Art.
		
		Use o comando pwd para confirmar a alteração:
		
Atalhos
	Os Caracteres ..
		Independentemente do diretório em que você esteja, os caracteres .. sempre representa um diretório maior em relação ao diretório atual, às vezes referido como o diretório pai. Para mover do diretório Art de volta para o diretório School:
		
	O Caractere .
		Independentemente do diretório em que você esteja, o caractere . sempre representa seu diretório atual. Para o cd este atalho não é muito útil, mas será útil para comandos cobertos nas seções subsequentes.
		
	O caractere ~
		O diretório home do usuário atual é representado pelo caractere ~. Como mencionado acima, você sempre começa como o usuário sysadmin, cuja home está localizada em /home/sysadmin. Para retornar ao seu diretório home a qualquer momento, execute o seguinte comando:
		
Listando arquivos
	O comando ls é usado para listar o conteúdo de um diretório. Você já o viu sendo usado algumas vezes antes em exemplos, mas esta página ajudará a garantir que você esteja confortável com seu uso.
	
	ls [OPÇÕES] [ARQUIVO]
	Por padrão, quando o comando ls é usado sem opções ou argumentos, ele irá listar os arquivos no diretório atual:
	
	Para saber os detalhes sobre um arquivo, tais como, o tipo de arquivo, as permissões, propriedade ou o carimbo de data/hora, execute uma listagem longa usando a opção -l para o comando ls. Abaixo, uma listagem do diretório /var/log é usada como um exemplo, uma vez que fornece uma variedade de saídas:
	
	Cada linha corresponde a um arquivo contido no diretório. As informações podem ser divididas em campos separados por espaços. Os campos são os seguintes:

	Tipo de arquivo
		-rw-r--r-- 1 root   root  18047 Dec 20  2017 alternatives.log       
					
		drwxr-x--- 2 root   adm    4096 Dec 20  2017 apache2  
		
	Na verdade, o primeiro campo contém dez caracteres, onde o primeiro caractere indica o tipo de arquivo e os próximos nove especificam permissões. Os tipos de arquivo são:
	
		Símbolo	Tipo de Arquivo	Descrição
			d	diretório	Um arquivo usado para armazenar outros arquivos.
			-	arquivo regular	Inclui arquivos legíveis, arquivos de imagens, arquivos binários e arquivos compactados.
			l	link simbólico	Aponta para outro arquivo.
			s	tomada	Permite a comunicação entre processos.
			p	tubo	Permite a comunicação entre processos.
			b	bloquear arquivo	Usado para se comunicar com o hardware.
			c	arquivo de caracteres	Usado para se comunicar com o hardware.
			
	O primeiro arquivo alternatives.log é um arquivo regular -, enquanto o segundo arquivo apache2 é um diretório d.
	
	Permissões
		drwxr-xr-x 2 root   root   4096 Apr 11  2014 upstart
		As permissões indicam como determinados usuários podem acessar um arquivo. Continue lendo para saber mais sobre permissões.
		
	Contagem de links físicos
		-rw-r----- 1 syslog adm    1346 Oct  2 22:17 auth.log
		Esse número indica quantos links rígidos apontam para esse arquivo. Links rígidos estão além do objetivo deste módulo, mas são abordados no curso NDG Linux Essentials.
	
	Proprietário do usuário
		-rw-r----- 1 syslog adm     106 Oct  2 19:57 kern.log
		O usuário syslog possui este arquivo. Toda vez que um arquivo é criado, a propriedade é automaticamente atribuída ao usuário que o criou.
		
	Proprietário do Grupo
		-rw-rw-r-- 1 root   utmp 292584 Oct  2 19:57 lastlog
		Indica qual grupo possui este arquivo.
		
	Tamanho do arquivo
		-rw-r----- 1 syslog adm   19573 Oct  2 22:57 syslog
		Diretórios e arquivos maiores podem ser mostrados em kilobytes, uma vez que exibir seu tamanho em bytes apresentaria um número muito grande. Portanto, no caso de um diretório, ele pode realmente ser um múltiplo do tamanho do bloco usado para o sistema de arquivos. O tamanho do bloco é o tamanho de uma série de dados armazenados no sistema de arquivos.
		
	Registro de data/hora
		drwxr-xr-x 2 root   root   4096 Dec  7  2017 fsck
		Isso indica a hora em que o conteúdo do arquivo foi modificado pela última vez.
		
	Nome do arquivo
		-rw-r--r-- 1 root   root  47816 Dec  7  2017 bootstrap.log
		O campo final contém o nome do arquivo ou diretório.
		
	Considere isto
		No caso de links simbólicos, um arquivo que aponta para outro arquivo, o nome do link será exibido junto com uma seta e o nome do caminho do arquivo original.
		
		lrwxrwxrwx. 1 root root 22 Nov 6 2012 /etc/grub.conf -> ../boot/grub/grub.conf
		
		Links simbólicos estão além do escopo deste módulo, mas são abordados no curso NDG Linux Essentials.
		
	Organizando
		Por padrão, a saída do comando ls é organizada alfabeticamente pelo nome do arquivo. Ele pode classificar por outros métodos também.
		
		A opção -t irá classificar os arquivos por registro de data/hora:
			$ ls -lt /var/log
			
		A opção -S ordenará os arquivos por tamanho de arquivo:
			$ ls -l -S /var/log
			
		A opção -r reverterá a ordem de qualquer tipo de classificação. Observe a diferença quando ela é adicionada ao exemplo anterior:
			$ ls -lSr /var/log
			
		Os números no campo de tamanho do arquivo mudam de decrescente para ascendente.

		Usado sozinho a opção -r com lista os arquivos em ordem alfabética inversa:
			$ ls -r /var/log
			
Acesso administrativo
	Existem muitos comandos Linux que lidam com informações confidenciais, como senhas, hardware do sistema, ou de outra forma operam sob outras circunstâncias excepcionais. Impedir que usuários regulares executem esses comandos ajuda a proteger o sistema. Fazer login como usuário root fornece acesso administrativo, permitindo a execução de alguns dos comandos privilegiados.
	
	O Comando su
		su OPÇÕES NOME_DO_USUÁRIO
		O comando su permite que você atue temporariamente como um usuário diferente. Ele faz isso criando um novo shell. O shell é simplesmente um console de entrada de texto que permite digitar comandos. Por padrão, se uma conta de usuário não for especificada, o comando su abrirá um novo shell como usuário root, que fornece privilégios administrativos.
		
		Acompanhar
			A utilização da opção shell de login é recomendada, pois o shell de login configura totalmente o novo shell com as configurações do novo usuário. Esta opção pode ser especificada de uma das três maneiras:
			su -
			su -l
			su --login
			
		Depois de executar o comando su, uma senha é necessária. Em nossas máquinas virtuais, a senha para as contas root e sysadmin é netlab123. Se você esquecer, ele é exibido sempre que uma nova máquina virtual seja iniciada. Como medida de segurança, a senha não estará visível à medida que for digitada.
			$ su  -
		
		Observe que o prompt de comando foi alterado para refletir que você agora está conectado como usuário root. Para sair e retornar à conta sysadmin, use o comando exit. Note que o prompt muda novamente:
			$ exit
		Para evitar a execução de comandos sensíveis, configuramos o comando Locomotiva Steam, o comando sl, para exigir acesso administrativo. Se o comando for executado como sysadmin, ele falhará:
			$ sl
		Use o comando su para alternar para a conta root e executar o comando sl com acesso administrativo:
			$ su  -
		Use o comando exit novamente para retornar à conta sysadmin.
		
	O Comando sudo
		sudo [OPTIONS] COMANDO
		
		O comando sudo permite que um usuário execute um comando como outro usuário sem criar um novo shell. Em vez disso, para executar um comando com privilégios administrativos, use-o como um argumento para o comando sudo. Como o comando su, o comando sudo assume por padrão que a conta de usuário root deve ser usada para executar comandos.
		
		Considere o seguinte
			O comando sudo também pode ser usado para alternar para outras contas de usuário. Para especificar uma conta de usuário diferente, use a opção -u.
		
		Execute o comando sl como usuário root colocando sudo na frente dele:
		
		Nota
			Lembre-se que a senha é netlab123. O prompt para a senha não aparecerá novamente enquanto o usuário continuar executando comandos sudo com menos de cinco minutos de intervalo.
	
		Uma vez concluído o comando, observe que o prompt não foi alterado, você ainda está conectado como sysadmin. O comando sudo fornece apenas acesso administrativo para a execução do comando especificado. Esta é uma vantagem, pois reduz o risco de um usuário executar acidentalmente um comando como root. A intenção de executar um comando é clara; o comando é executado como root se prefixado com o comando sudo. Caso contrário, o comando é executado como um usuário regular.
		
	Permissões
		As permissões determinam as maneiras pelas quais diferentes usuários podem interagir com um arquivo ou diretório. Ao listar um arquivo com o comando ls -l, a saída inclui informações de permissão. Para o exemplo, vamos usar um script chamado hello.sh localizado no diretório Documents:
		
		Abaixo está uma revisão dos campos relevantes para permissões.

		Campo Tipo de Arquivo
			-rw-r--r-- 1 sysadmin sysadmin 647 Dec 20  2017 hello.sh
			O primeiro caractere desta saída indica o tipo de um arquivo. Lembre-se de que, se o primeiro caractere for um -, este é um arquivo regular. Se o caractere fosse um d, seria um diretório.
		
		Campo Permissões
			-[rw-r--r--] 1 sysadmin sysadmin 647 Dec 20  2017 hello.sh
			Após o caractere do tipo de arquivo, as permissões são exibidas. As permissões são divididas em três conjuntos de três caracteres:
			
			Proprietário
				-[rw-]r--r-- 1 sysadmin sysadmin 647 Dec 20  2017 hello.sh
				O primeiro conjunto é para o usuário que possui o arquivo. Se a sua conta atual for o proprietário do arquivo, o primeiro conjunto das três permissões será aplicado e as outras permissões não terão efeito.
			
				O usuário que possui o arquivo e a quem essas permissões se aplicam, pode ser determinado pelo campo proprietário do usuário:
			
				-rw-r--r-- 1 sysadmin sysadmin 647 Dec 20  2017 hello.sh
			Grupo
				-rw-r--r-- 1 sysadmin sysadmin 647 Dec 20  2017 hello.sh
				O segundo conjunto é para o grupo que possui o arquivo. Se a sua conta atual não for o proprietário do arquivo e você for um membro do grupo que possui o arquivo, então as permissões do grupo serão aplicadas e as outras permissões não terão efeito.
				
				O grupo para este arquivo pode ser determinado pelo campo proprietário do grupo:
				
				-rw-r--r-- 1 sysadmin sysadmin 647 Dec 20  2017 hello.sh
			Outros
				-rw-r--r-- 1 sysadmin sysadmin 647 Dec 20  2017 hello.sh
				O último conjunto é para todos os outros, qualquer um que os dois primeiros conjuntos de permissões não se aplicam. Se você não for o usuário proprietário do arquivo ou um membro do grupo que possui o arquivo, o terceiro conjunto de permissões se aplica a você.
				
		Tipos de permissão
			Existem três permissões diferentes que podem ser colocadas em um arquivo ou diretório: ler, gravar e executar. A maneira pela qual essas permissões se aplicam difere para arquivos e diretórios, conforme mostrado no gráfico abaixo:
			
			Permissão		Efeitos no arquivo											Efeitos no diretório
			ler (r)			Permite que o conteúdo do arquivo seja lido ou copiado.		Sem permissão de execução no diretório, permite uma lista não detalhada de arquivos. Com permissão de execução, ls -l pode fornecer uma lista detalhada.
			
			escrever (w)	Permite que o conteúdo seja modificado ou substituído. 		Permite que arquivos sejam adicionados ou removidos de um diretório.	Para que essa permissão funcione, o diretório também deve ter permissão de execução.
			
			executar (x)	Permite que um arquivo seja executado como um processo, embora os arquivos de script exijam permissão de leitura, também.	Permite que um usuário mude para o diretório se os diretórios pai também tiverem permissão de execução.
			
			Considere isto
				Compreender quais permissões se aplicam é um conjunto de habilidades importante no Linux. Por exemplo, considere o seguinte conjunto de permissões:
				
				-rw-rwx. 1 sysadmin staff 999 abr 10 2013 /home/sysadmin/test
				Nesse cenário, o usuário sysadmin acaba tendo menos acesso a esse arquivo do que os membros do grupo de staff ou todos os outros. O usuário sysadmin só tem as permissões de r--. Não importa se sysadmin é um membro do grupo de staff; uma vez estabelecida a propriedade do usuário, somente as permissões do proprietário do usuário serão aplicadas.
				
	Alterando permissões de arquivo
		O comando chmod é usado para alterar as permissões de um arquivo ou diretório. Somente o usuário root ou o usuário que possui o arquivo é capaz de alterar as permissões de um arquivo.
		
		Considere o seguinte
			Por que o comando é chamado chmod em vez de chperm? As permissões costumavam ser referidas como modos de acesso, então o comando chmod realmente significa alterar os mod os de acesso.
		
		Existem duas técnicas para alterar permissões com o comando chmod: simbólico e octal. O método simbólico é bom para alterar um conjunto de permissões de cada vez. O método octal ou numérico requer o conhecimento do valor octal de cada uma das permissões e requer que todos os três conjuntos de permissões (usuário, grupo, outros) sejam especificados a cada vez. Por uma questão de simplicidade, apenas o método simbólico será coberto. Para saber mais sobre o método octal confira NDG Linux Essentials!
		
		O Método Simbólico
			chmod [<CONJUNTO><AÇAO><PERMISSÕES>]... ARQUIVO
			Para usar o método simbólico de chmod indicar primeiro qual conjunto de permissões está sendo alterado:
			
			chmod [{<CONJUNTO>}<AÇAO><PERMISSÕES>]... ARQUIVO
				Símbolo	Significado
				u		Usuário: o usuário que possui o arquivo.
				g		Grupo: o grupo que possui o arquivo.
				o		Outros: qualquer pessoa que não seja o proprietário do usuário ou membro do proprietário do grupo.
				a		Todos: refere-se ao usuário, grupo e outros.
				
				
			Em seguida, especifique um símbolo de ação:
			chmod [<CONJUNTO>{<AÇAO>}<PERMISSÕES>]... ARQUIVO
			Símbolo	Significado
			+		Adicione a permissão, se necessário
			=		Especifique a permissão exata
			-		Remova a permissão, se necessário
			
			Após um símbolo de ação, especifique uma ou mais permissões a serem executadas.
			
			chmod [<CONJUNTO><AÇAO><PERMISSÕES>]... ARQUIVO
			Símbolo	Significado
			r		ler
			w		escrever
			x		executar
			
			Finalmente, um espaço e os nomes de caminho para os arquivos atribuírem essas permissões.
			
			chmod [<CONJUNTO><AÇAO><PERMISSÕES>]... ARQUIVO
			O arquivo hello.sh usado nos exemplos na página anterior é um script. Um script é um arquivo que pode ser executado, semelhante a um comando:
			
			No entanto, atualmente, a permissão de execução não está definida para nenhum dos grupos de permissões:
			-rw-r--r-- 1 sysadmin sysadmin 647 Dec 20  2017 hello.sh
			Falha ao tentar executar esse script usando a seguinte sintaxe:
			
			Como o sistema está atualmente conectado como o usuário sysadmin, e sysadmin é o proprietário deste arquivo, dando ao proprietário do usuário a permissão de execução deve permitir que você execute este script. Usando o comando chmod com o caractere u para representar o conjunto de permissões do proprietário do usuário, o caractere + para indicar uma permissão está sendo adicionado e o caractere x para representar a permissão de execução, o comando deve ser executado da seguinte forma:
				$ chmod u+x hello.sh
				
			Nenhuma saída indica que o comando foi bem-sucedido. Confirme verificando as permissões usando o comando ls -l:
			
			O proprietário do usuário agora tem a permissão de execução listada:

			-rwxr--r-- 1 sysadmin sysadmin 647 Dec 20  2017 hello.sh
			Finalmente, tente executar o script novamente. Use a sintaxe de comando mostrada abaixo:
			
			./hello.sh
			
			Considere o seguinte
				Observe que para executar o script no exemplo anterior, um ./ combinação de caracteres foi colocada antes do nome do script.
				
				./hello.sh
				Isso indica que o “comando” deve ser executado a partir do diretório atual.
				
	Alterando a propriedade do arquivo
		Inicialmente, o proprietário de um arquivo é o usuário que o cria. O comando chown é usado para alterar a propriedade de arquivos e diretórios. Alterar o proprietário do usuário requer acesso administrativo. Um usuário regular não pode usar esse comando para alterar o proprietário do usuário de um arquivo, mesmo para dar a propriedade de um de seus próprios arquivos a outro usuário. No entanto, o comando chown também permite alterar a propriedade do grupo, o que pode ser feito pela root ou o proprietário do arquivo.

		Para alterar o proprietário do usuário de um arquivo, a seguinte sintaxe pode ser usada. O primeiro argumento, [PROPRIETÁRIO], especifica qual usuário deve ser o novo proprietário. O segundo argumento, ARQUIVO, especifica qual propriedade do arquivo está mudando.
		
		chown [OPÇÕES] [PROPRIETÁRIO] ARQUIVO
		
		Atualmente, todos os arquivos no diretório Documents são de propriedade do usuário sysadmin. Isso pode ser verificado usando o comando ls -l. Lembre-se de que a terceira coluna indica o proprietário do usuário.
		
		Para alternar o proprietário do script hello.sh para o usuário root, use root como o primeiro argumento e hello.sh como o segundo argumento. Não se esqueça de usar o comando sudo para obter os privilégios administrativos necessários. Use a senha netlab123 quando solicitado:
			$ sudo chown root hello.sh
		Confirme se o proprietário do usuário foi alterado executando o comando ls -l. Use o nome do arquivo como um argumento para limitar a saída:
		
		O campo proprietário do usuário agora é root indicando que a alteração foi bem-sucedida.

		-rwxr--r-- 1 [root] sysadmin 647 Dec 20  2017 hello.sh
		
	Exibindo Arquivos
		Existem alguns comandos Linux disponíveis para visualizar o conteúdo dos arquivos. O comando cat, que significa 'concatenate', é frequentemente usado para visualizar rapidamente o conteúdo de pequenos arquivos.

		O comando cat exibirá todo o conteúdo do arquivo, por isso é recomendado principalmente para arquivos menores onde a saída é limitada e não requer rolagem. Para visualizar o conteúdo de um arquivo usando o comando cat, basta digitar o comando e usar o nome do arquivo que você deseja visualizar como argumento:
		
		cat [OPÇÕES] [ARQUIVO]
		
		Nossa VM tem alguns pequenos arquivos de texto que você pode visualizar com o comando cat. Um desses arquivos é o arquivo animals.txt:
		$ cat animals.txt
		
		O comando cat exibe todas as cinco linhas do arquivo acima. Ao visualizar arquivos maiores, o comando cat pode resultar em uma saída muito longa que não pode ser pausada para rolar. Um melhor método de visualização de arquivos de texto longos,é com um comando de pager que possui uma funcionalidade que pode pausar e rolar pela saída do arquivo.
		
			Nota
				Exemplos de comandos de pager incluem comandos more ou less. Estes e os comandos adicionais usados para visualizar arquivos no Linux são cobertos pelo NDG Linux Essentials.

		Outra maneira de visualizar o conteúdo dos arquivos é usando os comandos head e tail. Esses comandos são usados para exibir um número selecionado de linhas na parte superior ou inferior de um arquivo. Dar uma olhada em algumas linhas de um arquivo às vezes pode ser útil para garantir que o arquivo seja aquele que você deseja usar.

		Outro motivo para visualizar apenas a primeira ou última linha, é porque alguns arquivos, como arquivos de log do sistema, são frequentemente atualizados com novas entradas. Semelhante ao comando cat, os comandos head e tail usam o nome do arquivo que você deseja visualizar como argumento para o comando:
		
		head [OPÇÕES] [ARQUIVO]
		tail [OPÇÕES] [ARQUIVO]
		
		Para comparar a saída dos comandos head e tail com a do comando cat, use o comando cat para exibir todo o arquivo alpha.txt:
			$ cat alpha.txt
			
		No exemplo acima, todas as vinte e seis linhas do arquivo são exibidas.
		Para filtrar as linhas de saída e visualização da parte superior do arquivo alpha.txt, use o comando head:
			$ head alpha.txt
			
		Em seguida, para exibir linhas na parte inferior do arquivo alpha.txt, use o comando tail:
			$ tail alpha.txt
			
		Ao examinar a saída dos comandos head e tail acima, você pode ver que o comportamento padrão dos comandos head e tail neste shell é exibir dez linhas.

		A opção -n com os comandos head e tail pode ser usada para especificar a quantidade de linhas a serem exibidas. Para usar a opção -n, especifique a quantidade de linhas do arquivo que deseja exibir após a opção e use o nome do arquivo como argumento:
		
			$ head -n número_de_linhas nome_do_arquivo
			
		Por exemplo, para alterar a saída do comando head para exibir as primeiras cinco linhas do arquivo alpha.txt:
			$ head -n 5 alpha.txt
			
		Exibir as últimas cinco linhas do arquivo alpha.txt:
			$ tail -n 5 alpha.txt 
			
			
	Copiando Arquivos
		Criar cópias de arquivos pode ser útil por vários motivos:
		
		Se uma cópia de um arquivo for criada antes que as alterações sejam feitas, é possível voltar ao original.
		
		Uma cópia de um arquivo pode ser usada para transferir um arquivo para dispositivos de mídia removíveis.
		
		Uma cópia de um documento existente pode ser usada como modelo para um novo documento.
		
			cp [OPÇÕES] FONTE DESTINO
			
		O comando cp é usado para copiar arquivos. Semelhante ao comando mv, ele requer pelo menos dois argumentos: uma origem e um destino. Por exemplo, para copiar o arquivo /etc/passwd para o diretório atual, use o seguinte comando:
			$ cp /etc/passwd .
			
		O resultado da execução do comando anterior criaria uma cópia do conteúdo do arquivo /etc/passwd no diretório Documents, uma vez que esse é o nosso diretório atual. Isso pode ser confirmado usando o comando ls:
		
		Considere o seguinte
			As permissões podem ter um impacto nos comandos de gerenciamento de arquivos, como o comando cp. Para copiar um arquivo, é necessário ter permissão de execução para acessar o diretório onde o arquivo está localizado e a permissão de leitura para o arquivo que está sendo copiado.

			Também é necessário ter permissão de gravação e execução no diretório para o qual o arquivo está sendo copiado. Normalmente, há dois lugares onde você sempre deve ter permissão de gravação e execução no diretório: seu diretório home e o diretório /tmp.
			
	Copiando Arquivos
		O comando dd é um utilitário para copiar arquivos ou partições inteiras no nível de bits.
		
			$ dd [OPÇÕES] OPERANDO
			
		Este comando tem vários recursos úteis, inclusive:

			Pode ser usado para clonar ou excluir (limpar) discos ou partições inteiros.
			Pode ser usado para copiar dados brutos para dispositivos removíveis, como unidades USB e CDROMs.
			Pode fazer backup e restaurar o MBR (Master Boot Record).
			Pode ser usado para criar um arquivo de tamanho específico preenchido com zeros binários, que pode ser usado como um arquivo de swap (memória virtual).
			
		Vamos examinar o seguinte exemplo. O comando dd cria um arquivo chamado /tmp/swapex com 50 blocos de zeros que têm um megabyte de tamanho:
		
			$ dd if=/dev/zero of=/tmp/swapex bs=1M count=50 
			
		O comando dd usa argumentos especiais para especificar como ele funcionará. A seguir ilustra alguns dos argumentos mais comumente usados:
		Argumento	Descrição
		if	
					Arquivo de entrada: O arquivo de entrada a ser lido. (arquivo que quero copiar)
		
					dd if=[/dev/zero] of=/tmp/swapex bs=1M count=50
					O exemplo lê do arquivo /dev/zero, um arquivo especial contendo um número ilimitado de zeros.
		
		of	
					Arquivo de saída: O arquivo de saída a ser gravado. (onde vou gravar)
					dd if=/dev/zero of=[/tmp/swapex] bs=1M count=50
					
		bs	
					Tamanho do bloco: O tamanho do bloco a ser usado. Por padrão, o valor é considerado em bytes. Use os seguintes sufixos para especificar outras unidades: K, M, G e T para kilobytes, megabytes, gigabytes e terabytes respectivamente.
		
					dd if=/dev/zero of=/tmp/swapex [bs=1M] count=50
					O exemplo usa um tamanho de bloco de um megabyte.
		
		count	
					Contagem: O número de blocos a serem lidos a partir do arquivo de entrada. (do arquivo que quero copiar)
					
					dd if=/dev/zero of=/tmp/swapex bs=1M count=50
					O comando de exemplo lê 50 blocos.
					
		Considere o seguinte
			Nenhum tamanho de bloco ou contagem precisa ser especificado ao copiar em dispositivos inteiros. Por exemplo, para clonar de um disco rígido (/dev/sda) para outro (/dev/sdb) execute o seguinte comando:

			$ dd if=/dev/sda of=/dev/sdb
			
	Mover arquivos
		O comando mv é usado para mover um arquivo de um local no sistema de arquivos para outro.
		
			mv FONTE DESTINO
		
		O comando mv requer pelo menos dois argumentos. O primeiro argumento é a fonte, um caminho para o arquivo a ser movido. O segundo argumento é o destino, um caminho para onde o arquivo será movido. Os arquivos a serem movidos às vezes são chamados de origem, e o local onde os arquivos devem ser colocados é chamado de destino.
		
		Para mover o arquivo people.csv para o diretório Work, use o nome do arquivo como origem e o nome do diretório como destino:
			$ mv people.csv Work
			
		Se um arquivo for movido de um diretório para outro sem especificar um novo nome para o arquivo, ele manterá seu nome original. A movimentação acima pode ser confirmada usando o comando ls no diretório Work:
			$ ls Work
			
		O comando mv é capaz de mover vários arquivos, desde que o argumento final fornecido ao comando seja o destino. Por exemplo, para mover três arquivos para o diretório School:
			$ mv numbers.txt letters.txt alpha.txt School
			
		Mover um arquivo dentro do mesmo diretório é uma maneira eficaz de renomeá-lo. Por exemplo, no exemplo a seguir, o arquivo animals.txt recebe um novo nome de zoo.txt:
			$ mv animals.txt zoo.txt
			
		Considere isto
			As permissões podem ter um impacto nos comandos de gerenciamento de arquivos, como o comando mv. Mover um arquivo requer permissões de gravação e execução tanto nos diretórios de origem quanto nos de destino.
			
	Removendo arquivos
		O comando rm é usado para excluir arquivos e diretórios. É importante ter em mente que arquivos e diretórios excluídos não entram em uma “lixeira” como acontece com sistemas operacionais voltados para a área de trabalho. Quando um arquivo é excluído com o comando rm, ele quase sempre desaparece permanentemente.
		
			rm [OPÇÕES] ARQUIVO
		
		Sem opções, o comando rm é normalmente usado para remover arquivos regulares:
			$ rm linux.txt
			
		O comando rm ignorará os diretórios que é solicitado a remover; para excluir um diretório, use uma opção recursiva, seja as opções -r ou -R . Basta ter cuidado, uma vez que estas opções são “recursivas”, isto irá eliminar todos os arquivose todos os subdiretórios:
		
		Aviso
			O comando rm remove arquivos permanentemente. Para repetir os exemplos acima, redefina o terminal usando o botão de reinicialização.
		
		Considere isto
			As permissões podem ter um impacto nos comandos de gerenciamento de arquivos, como o comando rm.
			Para excluir um arquivo dentro de um diretório, um usuário deve ter permissão de gravação e execução em um diretório. Normalmente, os usuários regulares só têm esse tipo de permissão em seu diretório (home) pessoal e seus subdiretórios.
			
	Filtragem de Entrada
		O comando grep é um filtro de texto que irá procurar linhas de entrada e retorno que contenham uma correspondência para um determinado padrão.
		
		grep [OPÇÕES] PADRÃO [ARQUIVO]
		
		Por exemplo, o arquivo passwd que copiamos anteriormente para o diretório Documents contém os detalhes de contas especiais do sistema e contas de usuário no sistema. Este arquivo pode ser muito grande, no entanto, o comando grep pode ser usado filtrar informações sobre um usuário específico, como o usuário sysadmin. Use sysadmin como argumento de padrão e passwd como argumento de arquivo:
			$ grep sysadmin passwd
			
		O comando acima retornou a linha do passwd que contém o sysadmin padrão.
		O exemplo acima usa um termo de pesquisa simples como padrão, no entanto grep é capaz de interpretar padrões de pesquisa muito mais complexos.
		
	Expressões Regulares
		As expressões regulares têm duas formas comuns: básica e estendida. A maioria dos comandos que usam expressões regulares pode interpretar expressões regulares básicas. No entanto, expressões regulares estendidas não estão disponíveis para todos os comandos e uma opção de comando é normalmente necessária para que eles funcionem corretamente.
		
		A tabela a seguir resume os caracteres básicos de expressão regular:
			Caracteres Regex básicos		Significado
			.								Qualquer caractere único
				
			[ ]								Qualquer caractere especificado
				
			[^ ]							Não é o caractere especificado
				
			*								Zero ou mais caracteres anteriores
				
			^								Se o primeiro caractere do padrão, o padrão deve estar no início da linha para corresponder, caso contrário, apenas um literal ^
			
			$								Se o último caractere do padrão, o padrão deve estar no final da linha para corresponder, caso contrário, apenas um literal $
		
		A tabela a seguir resume as expressões regulares estendidas, que devem ser usadas com o comando egrep ou a opção -E com o comando grep:
			Caracteres Regex extendidos		Significado
			+								Um ou mais do padrão anterior
			?								O padrão anterior é opcional
			{ }								Especifique correspondências mínimas, máximas ou exatas do padrão anterior
			|								Alternação - um "ou" lógico
			( )								Usado para criar grupos
			
	Padrões básicos
		Expressões regulares são padrões que apenas certos comandos são capazes de interpretar. Expressões regulares podem ser expandidas para corresponder a determinadas sequências de caracteres no texto. Os exemplos exibidos nesta página farão uso de expressões regulares para demonstrar seu poder quando usado com o comando grep. Além disso, esses exemplos fornecem uma demonstração muito visual de como as expressões regulares funcionam, o texto correspondente será exibido em uma cor vermelha.
		
		A mais simples de todas as expressões regulares usam apenas caracteres literais, como o exemplo da página anterior:
			$ grep sysadmin passwd
			
		Caracteres Ancora
			Caracteres âncora são uma das formas como expressões regulares podem ser usadas para restringir os resultados da pesquisa. Por exemplo, a root padrão aparece muitas vezes no arquivo /etc/passwd:
				$ grep 'root' passwd
				
				Para evitar que o shell os intérprete erroneamente como caracteres especiais, esses padrões devem ser protegidos por aspas fortes, o que significa simplesmente colocá-los entre aspas simples.
			
			O primeiro caractere âncora ^ é usado para garantir que um padrão apareça no início da linha. Por exemplo, para encontrar todas as linhas em /etc/passwd que começam com root use o padrão ^root. Observe que ^ deve ser o primeiro caractere no padrão para ser efetivo.
				$ grep '^root' /etc/passwd
				
			Para o próximo exemplo, primeiro examine o arquivo alpha-first.txt. O comando cat pode ser usado para imprimir o conteúdo de um arquivo:
				$ cat alpha-first.txt
				
			O segundo caractere âncora $ pode ser usado para garantir que um padrão apareça no final da linha, reduzindo assim efetivamente os resultados da pesquisa. Para encontrar as linhas que terminam com um r no arquivo alpha-first.txt, use o padrão r$:
				$ grep 'r$' alpha-first.txt
				Provavelmente se colocar o r no final '$r' ele pega so os r no começo de palavras 
			
				Novamente, a posição deste caractere é importante, o $ deve ser o último caractere no padrão para ser eficaz como uma âncora.
			
			Combine um único caractere com .
				Uma das expressões mais úteis é o caractere de ponto .. Ele irá corresponder a qualquer caractere, exceto para o novo caractere de linha. O padrão r..f encontraria qualquer linha que contenhaa letra r seguida por exatamente dois caracteres (que pode ser qualquer caractere exceto uma nova linha) e, em seguida, a letra f:
					$ grep 'r..f' red.txt
						reef
						roof
						
				O mesmo conceito pode ser repetido usando outras combinações. O seguinte encontrará quatro palavras de letra que começam com r e com d:
					$ grep 'r..d' red.txt
					
				Este caractere pode ser usado qualquer número de vezes. Para localizar todas as palavras que tenham pelo menos quatro caracteres, o seguinte padrão pode ser usado:
					$ grep '....' red.txt ]
						reef
						reeed
						roof                                                                            
						reed
						root
						reel
						read
						
				A linha não precisa ser uma correspondência exata, ela simplesmente deve conter o padrão, como visto aqui quando r..t é pesquisado no arquivo /etc/passwd:
					$ grep 'r..t' /etc/passwd
					
			Corresponder um único caractere com []
				Os colchetes [] correspondem a um único caractere da lista ou intervalo de caracteres possíveis contidos entre parênteses.

				Por exemplo, dado o arquivo profile.txt:
					$ cat profile.txt